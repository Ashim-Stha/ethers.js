const ethers = require("ethers");
const fs = require("fs-extra");
require("dotenv").config();

async function main() {
  //connecting to our ganache local blockchain using RPC
  const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL);

  //connecting wallet using private key and provider
  // const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
  const encryptedJson = fs.readFileSync("./.encryptedKey.json", "utf8");
  let wallet = new ethers.Wallet.fromEncryptedJsonSync(
    encryptedJson,
    process.env.PRIVATE_KEY_PASSWORD
  );
  wallet = await wallet.connect(provider);

  //to deploy contract we need its abi and binary
  //we use readFileSync so to wait till the file is read
  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8");
  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf8"
  );

  //contract factory is the object used to deploy contracts
  const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
  console.log("Deploying contract,please wait...");

  const contract = await contractFactory.deploy({ gasLimit: 1000 });
  //console.log(contract.address); //Wait till the contract is deployed

  // //to get transaction receipt we have to wait till 1 block conformations
  // const transactionReceipt = await contract.deployTransaction.wait(1); //1 mean 1 block conformations
  // console.log(contract);

  // console.log("Here is deployment tarnsaction(transaction response)");
  // console.log(contract.deployTransaction);

  // console.log("Here is the transaction receipt");
  // console.log(transactionReceipt);

  // console.log("Lets deploy with only transaction data");
  // const nonce = await wallet.getTransactionCount();
  // const tx = {
  //   nonce: nonce,
  //   gasPrice: 20000000000,
  //   gasLimit: 1000000,
  //   to: null,
  //   value: 0,
  //   data: "0x608060405234801561001057600080fd5b5061076e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806319908de01461005c578063562272141461007a5780636057361d146100ab5780637487d6fa146100c7578063ee33623d146100e3575b600080fd5b610064610113565b6040516100719190610557565b60405180910390f35b610094600480360381019061008f919061046a565b610119565b6040516100a2929190610527565b60405180910390f35b6100c560048036038101906100c0919061046a565b6101d5565b005b6100e160048036038101906100dc919061040e565b6101df565b005b6100fd60048036038101906100f891906103c5565b61026f565b60405161010a9190610557565b60405180910390f35b60005481565b6001818154811061012957600080fd5b906000526020600020906002020160009150905080600001805461014c9061063b565b80601f01602080910402602001604051908101604052809291908181526020018280546101789061063b565b80156101c55780601f1061019a576101008083540402835291602001916101c5565b820191906000526020600020905b8154815290600101906020018083116101a857829003601f168201915b5050505050908060010154905082565b8060008190555050565b60016040518060400160405280848152602001838152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001908051906020019061023b92919061029d565b50602082015181600101555050806002836040516102599190610510565b9081526020016040518091039020819055505050565b6002818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b8280546102a99061063b565b90600052602060002090601f0160209004810192826102cb5760008555610312565b82601f106102e457805160ff1916838001178555610312565b82800160010185558215610312579182015b828111156103115782518255916020019190600101906102f6565b5b50905061031f9190610323565b5090565b5b8082111561033c576000816000905550600101610324565b5090565b600061035361034e84610597565b610572565b90508281526020810184848401111561036f5761036e610701565b5b61037a8482856105f9565b509392505050565b600082601f830112610397576103966106fc565b5b81356103a7848260208601610340565b91505092915050565b6000813590506103bf81610721565b92915050565b6000602082840312156103db576103da61070b565b5b600082013567ffffffffffffffff8111156103f9576103f8610706565b5b61040584828501610382565b91505092915050565b600080604083850312156104255761042461070b565b5b600083013567ffffffffffffffff81111561044357610442610706565b5b61044f85828601610382565b9250506020610460858286016103b0565b9150509250929050565b6000602082840312156104805761047f61070b565b5b600061048e848285016103b0565b91505092915050565b60006104a2826105c8565b6104ac81856105d3565b93506104bc818560208601610608565b6104c581610710565b840191505092915050565b60006104db826105c8565b6104e581856105e4565b93506104f5818560208601610608565b80840191505092915050565b61050a816105ef565b82525050565b600061051c82846104d0565b915081905092915050565b600060408201905081810360008301526105418185610497565b90506105506020830184610501565b9392505050565b600060208201905061056c6000830184610501565b92915050565b600061057c61058d565b9050610588828261066d565b919050565b6000604051905090565b600067ffffffffffffffff8211156105b2576105b16106cd565b5b6105bb82610710565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b8381101561062657808201518184015260208101905061060b565b83811115610635576000848401525b50505050565b6000600282049050600182168061065357607f821691505b602082108114156106675761066661069e565b5b50919050565b61067682610710565b810181811067ffffffffffffffff82111715610695576106946106cd565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61072a816105ef565b811461073557600080fd5b5056fea2646970667358221220c1139cb5b2305017d4da1bc860e42c55b5f8ba0896cc73ae393e758c563ca55864736f6c63430008070033",
  //   chainId: 5777,
  // };

  // //above transaction is unsigned so to sign it
  // const singnedTxResponse = await wallet.signTransaction(tx);
  // console.log(singnedTxResponse);

  // //above we just signed transaction we didnot send it
  // //when we use sendTransaction it is implicitly signed inside it
  // const sendTxResponse = await wallet.sendTransaction(tx);
  // console.log(sendTxResponse);

  const currentFavNum = await contract.retrieve();
  console.log(`Current fav num: ${currentFavNum}`);

  const transactionResponse = await contract.store("7");
  //console.log(transactionResponse);
  const transactionReceipt = await transactionResponse.wait(1);
  //console.log(transactionReceipt);
  const updatedFavNum = await contract.retrieve();
  console.log(`Updated fav num: ${updatedFavNum}`);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
